// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  username         String        @unique
  password         String
  firstName        String
  lastName         String
  email            String        @unique
  isEmailValidated Boolean       @default(false)
  phone            String        @unique
  address          String
  dateOfBirth      DateTime      @default(now())
  cretedAt         DateTime      @default(now())
  roles            String[]      @default(["Staff"])
  Like             Like[]
  Comment          Comment[]
  Department       Department?   @relation(fields: [departmentId], references: [id])
  departmentId     Int?
  QADepartment     QADepartment?
}

model Department {
  id             Int           @id @default(autoincrement())
  defartmentName String
  qADepartment   QADepartment?
  user           User[]
}

model QADepartment {
  id           Int        @id @default(autoincrement())
  position     String     @default("QA")
  epartment    Department @relation(fields: [departmentId], references: [id])
  departmentId Int        @unique
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @unique
}

model Idiea {
  id              Int              @id @default(autoincrement())
  content         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  closeIdieaAt    DateTime?
  closeCommentAt  DateTime?
  anonymous       Boolean
  documents       Document[]
  categoryDetails CategoryDetail[]
  likes           Like[]
  comments        Comment[]
}

model Document {
  id      Int    @id @default(autoincrement())
  name    String
  type    String
  size    Int
  Idiea   Idiea? @relation(fields: [idieaId], references: [id])
  idieaId Int?
}

model Comment {
  id        Int     @id @default(autoincrement())
  content   String
  anonymous Boolean
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  idiea     Idiea   @relation(fields: [idieaId], references: [id])
  idieaId   Int
}

model Like {
  id       Int     @id @default(autoincrement())
  positive Boolean @default(true)
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  idiea    Idiea   @relation(fields: [idieaId], references: [id])
  idieaId  Int

  @@unique([userId, idieaId])
}

model Category {
  id             Int              @id @default(autoincrement())
  categoryName   String
  description    String?
  categoryDetals CategoryDetail[]
}

model CategoryDetail {
  id Int @id @default(autoincrement())

  Idiea      Idiea?    @relation(fields: [idieaId], references: [id])
  idieaId    Int?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model RefeshToken {
  id    Int    @id @default(autoincrement())
  token String
}
